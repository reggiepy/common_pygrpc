import common_pb2_grpc
from _typeshed import Incomplete

logger: Incomplete
rpc_logger: Incomplete

def rpc_log(func): ...

class Server:
    server: Incomplete
    host: Incomplete
    port: Incomplete
    addr: Incomplete
    def __init__(self, server, host, port) -> None: ...
    def copy(self): ...
    @property
    def channel(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class CommonService(common_pb2_grpc.CommonServiceServicer):
    @classmethod
    def clazz_handler(cls, clazz): ...
    def handle(self, request, context): ...

class GrpcClient:
    def handle(self) -> None: ...
    def connect(self, server): ...
    def get_server(self, server): ...
    def load(self, servers) -> None: ...
    stubs: Incomplete
    server_address: Incomplete
    def __init__(self) -> None: ...

class GrpcServer:
    address: Incomplete
    max_workers: Incomplete
    service: Incomplete
    rpc_server: Incomplete
    max_message_length: Incomplete
    def __init__(self, host: str = ..., port: int = ..., max_workers: int = ..., max_message_length=...) -> None: ...
    def set_clazz_handler(self, func) -> None: ...
    def run(self) -> None: ...
    def run_background(self) -> None: ...
    def run_blocking(self) -> None: ...

class GrpcException(Exception):
    exc_type: Incomplete
    message: Incomplete
    def __init__(self, exc_type, message) -> None: ...

def grpc_service(server, serialize: int = ...): ...

class GrpcHelper:
    @classmethod
    def call_rpc(cls, rpc_client, clazz, method, args: Incomplete | None = ..., kwargs: Incomplete | None = ..., request_id: Incomplete | None = ..., serialize: int = ...): ...
    @classmethod
    def call_rpc_result(cls, rpc_client, clazz, method, args: Incomplete | None = ..., kwargs: Incomplete | None = ..., request_id: Incomplete | None = ...): ...

grpc_client: Incomplete
